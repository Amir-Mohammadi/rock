// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using rock.Core.Data;

namespace rock.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("rock.Core.Domains.Catalogs.Catalog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Catalogs");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<bool>("HasMultiple")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("ShowInFilter")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ReferenceId");

                    b.ToTable("CatalogItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogMemory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId");

                    b.ToTable("CatalogMemories");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogMemoryItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CatalogItemId")
                        .HasColumnType("int");

                    b.Property<int>("CatalogMemoryId")
                        .HasColumnType("int");

                    b.Property<string>("ExtraKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogItemId");

                    b.HasIndex("CatalogMemoryId");

                    b.ToTable("CatalogMemoryItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrowserTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProfileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasFilter("[ProfileId] IS NOT NULL");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Ratio")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AreaCode")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Static", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("StaticType")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Statics");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Transportation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Distance")
                        .HasColumnType("int");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromCityId");

                    b.HasIndex("ToCityId");

                    b.ToTable("Transportation");
                });

            modelBuilder.Entity("rock.Core.Domains.Contents.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ContentType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("rock.Core.Domains.Contents.ContentFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("FileId")
                        .IsUnique();

                    b.ToTable("ContentFiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("rock.Core.Domains.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Access")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FileStream")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerGroup")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ThreadId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ThreadId")
                        .IsUnique()
                        .HasFilter("[ThreadId] IS NOT NULL");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Bill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId")
                        .IsUnique();

                    b.ToTable("Bills");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.BillItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BillId")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BillId");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.ToTable("BillItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.FinancialAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<string>("No")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("FinancialAccounts");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.FinancialTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasPrecision(25, 9)
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("FinancialAccountId");

                    b.ToTable("FinancialTransactions");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Purchase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsVerfied")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentPayload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentSapNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentTransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RRN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("VerifyPayload")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Purchases");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.HasIndex("PurchaseId");

                    b.ToTable("PurchaseItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Forms.Form", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormOptions")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Forms");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProfileAddressId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProfileAddressId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductPriceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ShopStuffPriceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductPriceId");

                    b.HasIndex("ShopStuffPriceId");

                    b.HasIndex("ProductId", "ColorId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MaxQuantities")
                        .HasColumnType("int");

                    b.Property<int>("MaxQuantitiesPerUser")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Coupons");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LatestOrderStatusId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Tax")
                        .HasColumnType("int");

                    b.Property<int>("TotalAmount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("CouponId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LatestOrderStatusId")
                        .IsUnique()
                        .HasFilter("[LatestOrderStatusId] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CartItemId")
                        .HasColumnType("int");

                    b.Property<int?>("LatestOrderItemStatusId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<int?>("TransportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartItemId")
                        .IsUnique();

                    b.HasIndex("LatestOrderItemStatusId")
                        .IsUnique()
                        .HasFilter("[LatestOrderItemStatusId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.HasIndex("ShopId");

                    b.HasIndex("TransportId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId");

                    b.ToTable("OrderItemStatuses");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusType")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Transport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.Property<string>("TrackingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FromCityId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ToCityId");

                    b.ToTable("Transports");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.BankTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("BankParameter1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankParameter2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankParameter3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankParameter4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderPaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentGateway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentKind")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TerminalId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BankTransactions");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.OrderPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("BankTransactionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Visited")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BankTransactionId")
                        .IsUnique()
                        .HasFilter("[BankTransactionId] IS NOT NULL");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderPayments");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.PaymentGateway", b =>
                {
                    b.Property<string>("Gateway")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FinancialAccountId")
                        .HasColumnType("int");

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Gateway");

                    b.HasIndex("FinancialAccountId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.ToTable("PaymentGateways");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("BriefDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrowserTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatalogMemoryId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultColorId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviewProductImageId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CatalogMemoryId");

                    b.HasIndex("PreviewProductImageId")
                        .IsUnique()
                        .HasFilter("[PreviewProductImageId] IS NOT NULL");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("Id", "DefaultColorId")
                        .IsUnique()
                        .HasFilter("[DefaultColorId] IS NOT NULL");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductBrochure", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("HTML")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProductId")
                        .IsUnique();

                    b.ToTable("ProductBrochures");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductBrochureAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BrochurId")
                        .HasColumnType("int");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrochurId");

                    b.HasIndex("FileId");

                    b.ToTable("ProductBrochureAttachments");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrowserTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CatalogId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Explanation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CatalogId")
                        .IsUnique();

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductCategoryBrand", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProductCategoryId", "BrandId");

                    b.HasIndex("BrandId");

                    b.ToTable("ProductCategoryBrands");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductColor", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ProductId", "ColorId");

                    b.HasIndex("ColorId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageAlt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("ImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<double>("Discount")
                        .HasColumnType("float");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("float");

                    b.Property<double>("MinPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ProductId", "ColorId");

                    b.ToTable("ProductPrices");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductShippingInfo", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<int>("Length")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.ToTable("ProductShippingInfos");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.CompanyProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("CompanyProfiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.PersonProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EconomicCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FatherName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PictureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("PersonProfiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.Profile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Profiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.ProfileAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressOwnerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileAddresses");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("OwnerId")
                        .IsUnique();

                    b.HasIndex("WarehouseId")
                        .IsUnique();

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId")
                        .IsUnique();

                    b.ToTable("ShopProfiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopStuff", b =>
                {
                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("ShopId", "StuffId");

                    b.HasIndex("StuffId");

                    b.ToTable("ShopStuffs");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopStuffPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ShopId", "StuffId");

                    b.HasIndex("StuffId", "ColorId");

                    b.ToTable("ShopStuffPrices");
                });

            modelBuilder.Entity("rock.Core.Domains.Threads.Thread", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Threads");
                });

            modelBuilder.Entity("rock.Core.Domains.Threads.ThreadActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Payload")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("ThreadId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("ReferenceId");

                    b.HasIndex("ThreadId");

                    b.HasIndex("UserId");

                    b.ToTable("ThreadActivities");
                });

            modelBuilder.Entity("rock.Core.Domains.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("rock.Core.Domains.Users.UserVerificationCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationCodes");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.Shipping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Shippings");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShippingItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShippingId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.HasIndex("ShippingId");

                    b.ToTable("ShippingItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShopInventoryModification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("ShopInventoryModifications");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShopInventoryModificationItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.Property<int>("ShopInventoryModificationId")
                        .HasColumnType("int");

                    b.Property<int>("StuffId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("ShopInventoryModificationId");

                    b.HasIndex("ShopId", "StuffId");

                    b.HasIndex("StuffId", "ColorId");

                    b.ToTable("ShopInventoryModificationItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.WarehouseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Amount")
                        .HasPrecision(25, 9)
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductId", "ColorId");

                    b.ToTable("WarehouseTransactions");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Catalogs.Catalog", "Catalog")
                        .WithMany("Items")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Catalogs.CatalogItem", "Reference")
                        .WithMany("Children")
                        .HasForeignKey("ReferenceId");

                    b.Navigation("Catalog");

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogMemory", b =>
                {
                    b.HasOne("rock.Core.Domains.Catalogs.Catalog", "Catalog")
                        .WithMany("CatalogMemories")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Catalog");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogMemoryItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Catalogs.CatalogItem", "CatalogItem")
                        .WithMany("CatalogMemoryItems")
                        .HasForeignKey("CatalogItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Catalogs.CatalogMemory", "CatalogMemory")
                        .WithMany("Items")
                        .HasForeignKey("CatalogMemoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CatalogItem");

                    b.Navigation("CatalogMemory");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Brand", b =>
                {
                    b.HasOne("rock.Core.Domains.Files.File", "Image")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Commons.Brand", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Commons.Brand", "ProfileId");

                    b.Navigation("Image");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.City", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Transportation", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Commons.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCity");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("rock.Core.Domains.Contents.ContentFile", b =>
                {
                    b.HasOne("rock.Core.Domains.Contents.Content", "Content")
                        .WithMany("ContentFiles")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Files.File", "File")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Contents.ContentFile", "FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("File");
                });

            modelBuilder.Entity("rock.Core.Domains.Documents.Document", b =>
                {
                    b.HasOne("rock.Core.Domains.Forms.Form", "Form")
                        .WithMany()
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Form");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Files.File", b =>
                {
                    b.HasOne("rock.Core.Domains.Threads.Thread", "Thread")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Files.File", "ThreadId");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Bill", b =>
                {
                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Financial.Bill", "DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.BillItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Financial.Bill", "Bill")
                        .WithMany("Items")
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Orders.OrderItem", "OrderItem")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Financial.BillItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.FinancialAccount", b =>
                {
                    b.HasOne("rock.Core.Domains.Financial.Bank", "Bank")
                        .WithMany("FinancialAccounts")
                        .HasForeignKey("BankId");

                    b.HasOne("rock.Core.Domains.Commons.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithOne("FinancialAccount")
                        .HasForeignKey("rock.Core.Domains.Financial.FinancialAccount", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Currency");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.FinancialTransaction", b =>
                {
                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Financial.FinancialAccount", "Account")
                        .WithMany("FinancialTransactions")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Document");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Purchase", b =>
                {
                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Orders.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.PurchaseItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.OrderItem", "OrderItem")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Financial.PurchaseItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Financial.Purchase", "Purchase")
                        .WithMany("Items")
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Purchase");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Cart", b =>
                {
                    b.HasOne("rock.Core.Domains.Profiles.ProfileAddress", "ProfileAddress")
                        .WithMany("Carts")
                        .HasForeignKey("ProfileAddressId");

                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProfileAddress");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.CartItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductPrice", "ProductPrice")
                        .WithMany()
                        .HasForeignKey("ProductPriceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.ShopStuffPrice", "StuffPrice")
                        .WithMany()
                        .HasForeignKey("ShopStuffPriceId");

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductId", "ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductPrice");

                    b.Navigation("StuffPrice");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Order", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.Cart", "Cart")
                        .WithOne("Order")
                        .HasForeignKey("rock.Core.Domains.Orders.Order", "CartId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Orders.Coupon", "Coupon")
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany("Orders")
                        .HasForeignKey("DocumentId");

                    b.HasOne("rock.Core.Domains.Orders.OrderStatus", "LatestOrderStatus")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Orders.Order", "LatestOrderStatusId");

                    b.Navigation("Cart");

                    b.Navigation("Coupon");

                    b.Navigation("Document");

                    b.Navigation("LatestOrderStatus");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.CartItem", "CartItem")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Orders.OrderItem", "CartItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Orders.OrderItemStatus", "LatestStatus")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Orders.OrderItem", "LatestOrderItemStatusId");

                    b.HasOne("rock.Core.Domains.Orders.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.Shop", "Shop")
                        .WithMany("OrderItems")
                        .HasForeignKey("ShopId");

                    b.HasOne("rock.Core.Domains.Orders.Transport", "Transport")
                        .WithMany("OrderItems")
                        .HasForeignKey("TransportId");

                    b.Navigation("CartItem");

                    b.Navigation("LatestStatus");

                    b.Navigation("Order");

                    b.Navigation("Shop");

                    b.Navigation("Transport");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderItemStatus", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.OrderItem", "OrderItem")
                        .WithMany("Statuses")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderStatus", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.Order", "Order")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Transport", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "FromCity")
                        .WithMany()
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Orders.Order", "Order")
                        .WithMany("Transports")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Commons.City", "ToCity")
                        .WithMany()
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromCity");

                    b.Navigation("Order");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.BankTransaction", b =>
                {
                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany("BankTransactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.OrderPayment", b =>
                {
                    b.HasOne("rock.Core.Domains.Payment.BankTransaction", "BankTransaction")
                        .WithOne("OrderPayment")
                        .HasForeignKey("rock.Core.Domains.Payment.OrderPayment", "BankTransactionId");

                    b.HasOne("rock.Core.Domains.Orders.Order", "Order")
                        .WithMany("OrderPayments")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankTransaction");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.PaymentGateway", b =>
                {
                    b.HasOne("rock.Core.Domains.Financial.FinancialAccount", "FinancialAccount")
                        .WithMany("PaymentGateways")
                        .HasForeignKey("FinancialAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Files.File", "Image")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Payment.PaymentGateway", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FinancialAccount");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.Product", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Catalogs.CatalogMemory", "CatalogMemory")
                        .WithMany()
                        .HasForeignKey("CatalogMemoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductImage", "PreviewProductImage")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Products.Product", "PreviewProductImageId");

                    b.HasOne("rock.Core.Domains.Products.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Threads.Thread", "Thread")
                        .WithMany()
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "DefaultProductColor")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Products.Product", "Id", "DefaultColorId");

                    b.Navigation("Brand");

                    b.Navigation("CatalogMemory");

                    b.Navigation("DefaultProductColor");

                    b.Navigation("PreviewProductImage");

                    b.Navigation("ProductCategory");

                    b.Navigation("Thread");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductBrochure", b =>
                {
                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithOne("ProductBrochure")
                        .HasForeignKey("rock.Core.Domains.Products.ProductBrochure", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductBrochureAttachment", b =>
                {
                    b.HasOne("rock.Core.Domains.Products.ProductBrochure", "Brochure")
                        .WithMany("Attachments")
                        .HasForeignKey("BrochurId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brochure");

                    b.Navigation("File");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductCategory", b =>
                {
                    b.HasOne("rock.Core.Domains.Catalogs.Catalog", "Catalog")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Products.ProductCategory", "CatalogId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductCategory", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Catalog");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductCategoryBrand", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Brand", "Brand")
                        .WithMany("ProductCategoryBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductCategory", "ProductCategory")
                        .WithMany("ProductCategoryBrands")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductColor", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithMany("ProductColors")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductImage", b =>
                {
                    b.HasOne("rock.Core.Domains.Files.File", "Image")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Products.ProductImage", "ImageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductPrice", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductId", "ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Color");

                    b.Navigation("Product");

                    b.Navigation("ProductColor");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductShippingInfo", b =>
                {
                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithOne("ProductShippingInfo")
                        .HasForeignKey("rock.Core.Domains.Products.ProductShippingInfo", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.CompanyProfile", b =>
                {
                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithOne("CompanyProfile")
                        .HasForeignKey("rock.Core.Domains.Profiles.CompanyProfile", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.PersonProfile", b =>
                {
                    b.HasOne("rock.Core.Domains.Files.File", "Picture")
                        .WithMany()
                        .HasForeignKey("PictureId");

                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithOne("PersonProfile")
                        .HasForeignKey("rock.Core.Domains.Profiles.PersonProfile", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Picture");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.Profile", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.Navigation("City");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.ProfileAddress", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithMany("Addresses")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.Shop", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Users.User", "Owner")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Shops.Shop", "OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Warehousing.Warehouse", "Warehouse")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Shops.Shop", "WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Owner");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopProfile", b =>
                {
                    b.HasOne("rock.Core.Domains.Shops.Shop", "Shop")
                        .WithOne("Profile")
                        .HasForeignKey("rock.Core.Domains.Shops.ShopProfile", "ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopStuff", b =>
                {
                    b.HasOne("rock.Core.Domains.Shops.Shop", "Shop")
                        .WithMany("ShopStuffs")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Stuff")
                        .WithMany("ShopStuffs")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("Stuff");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopStuffPrice", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Stuff")
                        .WithMany("ShopStuffPrices")
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.ShopStuff", "ShopStuff")
                        .WithMany("ShopStuffPrices")
                        .HasForeignKey("ShopId", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "StuffColor")
                        .WithMany()
                        .HasForeignKey("StuffId", "ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Shop");

                    b.Navigation("ShopStuff");

                    b.Navigation("Stuff");

                    b.Navigation("StuffColor");
                });

            modelBuilder.Entity("rock.Core.Domains.Threads.ThreadActivity", b =>
                {
                    b.HasOne("rock.Core.Domains.Users.User", "Publisher")
                        .WithMany("PublishedThreadActivities")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("rock.Core.Domains.Threads.ThreadActivity", "Reference")
                        .WithMany("ThreadActivityItems")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("rock.Core.Domains.Threads.Thread", "Thread")
                        .WithMany("Activities")
                        .HasForeignKey("ThreadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany("ThreadActivities")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");

                    b.Navigation("Reference");

                    b.Navigation("Thread");

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Users.User", b =>
                {
                    b.HasOne("rock.Core.Domains.Profiles.Profile", "Profile")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Users.User", "ProfileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("rock.Core.Domains.Users.UserVerificationCode", b =>
                {
                    b.HasOne("rock.Core.Domains.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.Shipping", b =>
                {
                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShippingItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Orders.OrderItem", "OrderItem")
                        .WithOne()
                        .HasForeignKey("rock.Core.Domains.Warehousing.ShippingItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Warehousing.Shipping", "Shipping")
                        .WithMany("Items")
                        .HasForeignKey("ShippingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Shipping");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShopInventoryModification", b =>
                {
                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Document");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShopInventoryModificationItem", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Warehousing.ShopInventoryModification", "ShopInventoryModification")
                        .WithMany("Items")
                        .HasForeignKey("ShopInventoryModificationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Stuff")
                        .WithMany()
                        .HasForeignKey("StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Shops.ShopStuff", "ShopStuff")
                        .WithMany()
                        .HasForeignKey("ShopId", "StuffId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "StuffColor")
                        .WithMany()
                        .HasForeignKey("StuffId", "ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Shop");

                    b.Navigation("ShopInventoryModification");

                    b.Navigation("ShopStuff");

                    b.Navigation("Stuff");

                    b.Navigation("StuffColor");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.WarehouseTransaction", b =>
                {
                    b.HasOne("rock.Core.Domains.Commons.Color", "Color")
                        .WithMany()
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Documents.Document", "Document")
                        .WithMany("WarehouseTransactions")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Warehousing.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("rock.Core.Domains.Products.ProductColor", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductId", "ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Document");

                    b.Navigation("Product");

                    b.Navigation("ProductColor");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.Catalog", b =>
                {
                    b.Navigation("CatalogMemories");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogItem", b =>
                {
                    b.Navigation("CatalogMemoryItems");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("rock.Core.Domains.Catalogs.CatalogMemory", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Brand", b =>
                {
                    b.Navigation("ProductCategoryBrands");
                });

            modelBuilder.Entity("rock.Core.Domains.Commons.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("rock.Core.Domains.Contents.Content", b =>
                {
                    b.Navigation("ContentFiles");
                });

            modelBuilder.Entity("rock.Core.Domains.Documents.Document", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("Orders");

                    b.Navigation("WarehouseTransactions");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Bank", b =>
                {
                    b.Navigation("FinancialAccounts");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Bill", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.FinancialAccount", b =>
                {
                    b.Navigation("FinancialTransactions");

                    b.Navigation("PaymentGateways");
                });

            modelBuilder.Entity("rock.Core.Domains.Financial.Purchase", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Cart", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Coupon", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Order", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("OrderPayments");

                    b.Navigation("OrderStatuses");

                    b.Navigation("Transports");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.OrderItem", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("rock.Core.Domains.Orders.Transport", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Payment.BankTransaction", b =>
                {
                    b.Navigation("OrderPayment");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.Product", b =>
                {
                    b.Navigation("ProductBrochure");

                    b.Navigation("ProductColors");

                    b.Navigation("ProductImages");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductShippingInfo");

                    b.Navigation("ShopStuffPrices");

                    b.Navigation("ShopStuffs");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductBrochure", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("rock.Core.Domains.Products.ProductCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("ProductCategoryBrands");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.Profile", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("CompanyProfile");

                    b.Navigation("FinancialAccount");

                    b.Navigation("PersonProfile");
                });

            modelBuilder.Entity("rock.Core.Domains.Profiles.ProfileAddress", b =>
                {
                    b.Navigation("Carts");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.Shop", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("Profile");

                    b.Navigation("ShopStuffs");
                });

            modelBuilder.Entity("rock.Core.Domains.Shops.ShopStuff", b =>
                {
                    b.Navigation("ShopStuffPrices");
                });

            modelBuilder.Entity("rock.Core.Domains.Threads.Thread", b =>
                {
                    b.Navigation("Activities");
                });

            modelBuilder.Entity("rock.Core.Domains.Threads.ThreadActivity", b =>
                {
                    b.Navigation("ThreadActivityItems");
                });

            modelBuilder.Entity("rock.Core.Domains.Users.User", b =>
                {
                    b.Navigation("BankTransactions");

                    b.Navigation("PublishedThreadActivities");

                    b.Navigation("ThreadActivities");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.Shipping", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("rock.Core.Domains.Warehousing.ShopInventoryModification", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
